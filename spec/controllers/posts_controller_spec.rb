require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PostsController, type: :controller do

  let(:user){ FactoryGirl.create(:user) }
  let(:post1){ FactoryGirl.create(:post, user: user) }
  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:post).merge(user_id: user.id)
  }

  let(:invalid_attributes) {
    valid_attributes.merge(title: '')
  }

  describe "GET #index" do
    let(:users) do
      (1..6).map{|i| FactoryGirl.create(:user, name: "user#{i}") }
    end
    let(:posts) do
      users.map.with_index(1) do |user, i|
        (1..25).map do |n|
          attrs = {
            title: "Example title #{i}/#{n}",
            content: "Example content #{i}/#{n}",
            user: user,
            rating: 1 + i + rand(3),
            category: i == 0 ? 'First' : 'Example'
          }
          FactoryGirl.create(:post, attrs)
        end
      end.flatten
    end

    before{ posts }

    it "assigns all posts as @posts" do
      get :index, params: {}
      expect(response).to have_http_status(:success)
      expect(response.headers['Content-Type']).to match %r{application/vnd.api\+json}
      jdata = JSON.parse(response.body)
      expect(jdata['data'].length).to eq Post.per_page
      expect(jdata['data'][0]['type']).to eq 'posts'
    end

    it "Should get valid list of posts" do
      get :index, params: { page: 2 }
      expect(response).to have_http_status(:success)
      jdata = JSON.parse response.body
      expect(jdata['data'].length).to eq Post.per_page
      expect(jdata['data'][0]['type']).to eq 'posts'
      l = jdata['links']
      expect(l['first']).to eq l['prev']
      expect(l['last' ]).to eq l['next']
      expected_meta = {
        'current-page' => 2,
        'next-page' => 3,
        'prev-page' => 1,
        'total-pages' => 3,
        'total-count' => Post.count, # 150
      }
      expect(jdata['meta']).to eq expected_meta
    end
  end

  describe "GET #show" do
    it "assigns the requested post as @post" do
      post1 # to load
      get :show, params: {id: post1.to_param}
      expect(assigns(:post)).to eq(post1)
    end
  end

  describe "POST #create" do
    context "with valid headers" do
      before do
        @request.headers["Content-Type"] = 'application/vnd.api+json'
      end
    context "with valid params" do
      it "creates a new Post" do
        expect {
          post :create, params: {post: valid_attributes}
        }.to change(Post, :count).by(1)
      end

      it "assigns a newly created post as @post" do
        post :create, params: {post: valid_attributes}
        expect(assigns(:post)).to be_a(Post)
        expect(assigns(:post)).to be_persisted
      end

      it "redirects to the created post" do
        post :create, params: {post: valid_attributes}
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved post as @post" do
        post :create, params: {post: invalid_attributes}
        expect(assigns(:post)).to be_a_new(Post)
      end

      it "re-renders the 'new' template" do
        post :create, params: {post: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
    end
  end

  describe "PUT #update" do
    context "with valid headers" do
      before do
        @request.headers["Content-Type"] = 'application/vnd.api+json'
      end
    context "with valid params" do
      let(:new_title){ "New Title #1" }
      let(:new_attributes) {
        valid_attributes.merge(title: new_title)
      }

      it "updates the requested post" do
        post1 # to load
        put :update, params: {id: post1.to_param, post: new_attributes}
        post1.reload
        expect(post1.title).to eq new_title
      end

      it "assigns the requested post as @post" do
        post1 # to load
        put :update, params: {id: post1.to_param, post: valid_attributes}
        expect(assigns(:post)).to eq(post1)
      end

      it "redirects to the post" do
        post1 # to load
        put :update, params: {id: post1.to_param, post: valid_attributes}
        expect(response).to have_http_status(:success)
      end
    end

    context "with invalid params" do
      it "assigns the post as @post" do
        post1 # to load
        put :update, params: {id: post1.to_param, post: invalid_attributes}
        expect(assigns(:post)).to eq(post1)
      end

      it "re-renders the 'edit' template" do
        post1 # to load
        put :update, params: {id: post1.to_param, post: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested post" do
      post1 # to load
      expect {
        delete :destroy, params: {id: post1.to_param}
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      post1 # to load
      delete :destroy, params: {id: post1.to_param}
      expect(response).to have_http_status(:no_content)
    end
  end

end
