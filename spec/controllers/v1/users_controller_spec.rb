require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe V1::UsersController, type: :controller do

  let(:password){ "password" }

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_parameters) {
    FactoryGirl.attributes_for(:user).merge(password: password, password_confirmation: password)
  }

  let(:invalid_parameters) {
    valid_parameters.symbolize_keys.merge(email: '')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # V1::UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    let(:user){ FactoryGirl.create(:user) }
    before{ devise_user_login(user) }

    it "assigns all users as @users" do
      get :index, params: {}, session: valid_session
      expect(assigns(:users)).to eq([user])
    end
  end

  describe "GET #show" do
    let(:user){ FactoryGirl.create(:user) }
    before{ devise_user_login(user) }

    it "assigns the requested user as @user" do
      user # To create user
      get :show, params: {:id => user.to_param}, session: valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {:user => valid_parameters}, session: valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, params: {:user => valid_parameters}, session: valid_session
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "redirects to the created user" do
        post :create, params: {:user => valid_parameters}, session: valid_session
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        post :create, params: {:user => invalid_parameters}, session: valid_session
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:user => invalid_parameters}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    let(:user){ FactoryGirl.create(:user) }
    before{ devise_user_login(user) }

    context "with valid params" do
      let(:new_email){ valid_parameters[:email].succ }

      let(:new_parameters) {
        valid_parameters.merge(email: new_email)
      }

      it "updates the requested user" do
        user # To create user
        put :update, params: {:id => user.to_param, :user => new_parameters}, session: valid_session
        user.reload
        expect(user.email).to eq new_email
      end

      it "assigns the requested user as @user" do
        user # To create user
        put :update, params: {:id => user.to_param, :user => valid_parameters}, session: valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "redirects to the user" do
        user # To create user
        put :update, params: {:id => user.to_param, :user => valid_parameters}, session: valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        user # To create user
        put :update, params: {:id => user.to_param, :user => invalid_parameters}, session: valid_session
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        user # To create user
        put :update, params: {:id => user.to_param, :user => invalid_parameters}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    let(:user){ FactoryGirl.create(:user) }
    before{ devise_user_login(user) }

    it "destroys the requested user" do
      user # To create user
      expect {
        delete :destroy, params: {:id => user.to_param}, session: valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user # To create user
      delete :destroy, params: {:id => user.to_param}, session: valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
